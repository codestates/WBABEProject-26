definitions:
  dto.CreateMenuRequest:
    properties:
      etcInfo:
        $ref: '#/definitions/dto.FoodEtcInfoRequest'
      event:
        description: 이벤트
        items:
          $ref: '#/definitions/menu_enums.MenuEventType'
        type: array
      menuCategory:
        description: 매뉴 카테고리
        items:
          $ref: '#/definitions/menu_enums.MenuCategoryType'
        type: array
      menuStatus:
        allOf:
        - $ref: '#/definitions/menu_enums.MenuSellStatusType'
        description: 주문 가능 여부
      name:
        description: 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      subMenu:
        description: 서브메뉴
        items:
          $ref: '#/definitions/dto.SubMenuRequest'
        type: array
    required:
    - etcInfo
    - event
    - menuCategory
    - menuStatus
    - name
    - price
    - subMenu
    type: object
  dto.CreateOrderListRequest:
    properties:
      orderMenuList:
        description: 주문 메뉴 리스트
        items:
          type: string
        type: array
      orderUserId:
        type: string
    required:
    - orderMenuList
    - orderUserId
    type: object
  dto.CreateRatingRequest:
    properties:
      menuId:
        type: string
      orderListId:
        type: string
      rating:
        $ref: '#/definitions/rating_enum.RatingScore'
      recommendation:
        description: binding:"required"
        type: boolean
      reviewMsg:
        type: string
      userId:
        type: string
    required:
    - menuId
    - orderListId
    - rating
    - reviewMsg
    - userId
    type: object
  dto.CreateUserRequest:
    properties:
      addr:
        description: 주소
        type: string
      name:
        description: 사용자 이름
        type: string
      phone:
        description: 사용자 폰번호
        type: string
    required:
    - addr
    - name
    - phone
    type: object
  dto.FoodEtcInfoRequest:
    properties:
      originInfo:
        description: 원산지
        type: string
      spicyInfo:
        allOf:
        - $ref: '#/definitions/menu_enums.FoodSpicyType'
        description: 맵기 정보  binding:"required"
    type: object
  dto.FullReadRatingResponse:
    properties:
      createDate:
        description: 데이터 생성 시각
        type: string
      id:
        type: string
      menuId:
        description: 메뉴 (_id)
        type: string
      orderListId:
        description: 주문리스트 (_id)
        type: string
      rating:
        $ref: '#/definitions/rating_enum.RatingScore'
      recommendation:
        type: boolean
      reviewMsg:
        type: string
      updateDate:
        description: 데이터 수정 시각
        type: string
      userId:
        description: 주문자 (_id)
        type: string
    type: object
  dto.HalfReadMenuResponse:
    properties:
      createDate:
        description: 데이터 생성 시각
        type: string
      event:
        description: 이벤트
        items:
          $ref: '#/definitions/menu_enums.MenuEventType'
        type: array
      foodEtcInfo:
        allOf:
        - $ref: '#/definitions/dto.FoodEtcInfoRequest'
        description: 기타 정보
      id:
        type: string
      menuCategory:
        description: 매뉴 카테고리
        items:
          $ref: '#/definitions/menu_enums.MenuCategoryType'
        type: array
      menuStaus:
        allOf:
        - $ref: '#/definitions/menu_enums.MenuSellStatusType'
        description: 주문 가능 여부
      name:
        description: 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      subMenu:
        description: 서브메뉴
        items:
          $ref: '#/definitions/dto.SubMenuRequest'
        type: array
      updateDate:
        description: 데이터 수정 시각
        type: string
    type: object
  dto.NomalReadOrderListResponse:
    properties:
      orderId:
        description: 고유 id
        type: string
      orderMenu:
        description: 주문 메뉴 리스트
        items:
          $ref: '#/definitions/dto.NormalReadMenuResponse'
        type: array
      orderStatus:
        allOf:
        - $ref: '#/definitions/order_list_enums.OrderStatus'
        description: 주문 상태
      orderUserId:
        description: 주문자
        type: string
      totalPrice:
        description: 총 가격
        type: integer
    type: object
  dto.NomalReadUserResponse:
    properties:
      addr:
        description: 주소
        type: string
      name:
        description: 사용자 이름
        type: string
      phone:
        description: 사용자 폰번호
        type: string
    type: object
  dto.NormalReadMenuResponse:
    properties:
      event:
        description: 이벤트
        items:
          $ref: '#/definitions/menu_enums.MenuEventType'
        type: array
      foodEtcInfo:
        allOf:
        - $ref: '#/definitions/dto.FoodEtcInfoRequest'
        description: 기타 정보
      id:
        type: string
      menuCategory:
        description: 매뉴 카테고리
        items:
          $ref: '#/definitions/menu_enums.MenuCategoryType'
        type: array
      menuStaus:
        allOf:
        - $ref: '#/definitions/menu_enums.MenuSellStatusType'
        description: 주문 가능 여부
      name:
        description: 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      subMenu:
        description: 서브메뉴
        items:
          $ref: '#/definitions/dto.SubMenuRequest'
        type: array
    type: object
  dto.ReadMenuRatingResponse:
    properties:
      createDate:
        description: 데이터 생성 시각
        type: string
      event:
        description: 이벤트
        items:
          $ref: '#/definitions/menu_enums.MenuEventType'
        type: array
      foodEtcInfo:
        allOf:
        - $ref: '#/definitions/dto.FoodEtcInfoRequest'
        description: 기타 정보
      id:
        type: string
      menuCategory:
        description: 매뉴 카테고리
        items:
          $ref: '#/definitions/menu_enums.MenuCategoryType'
        type: array
      menuStaus:
        allOf:
        - $ref: '#/definitions/menu_enums.MenuSellStatusType'
        description: 주문 가능 여부
      name:
        description: 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      rating:
        items:
          $ref: '#/definitions/dto.FullReadRatingResponse'
        type: array
      subMenu:
        description: 서브메뉴
        items:
          $ref: '#/definitions/dto.SubMenuRequest'
        type: array
      updateDate:
        description: 데이터 수정 시각
        type: string
    type: object
  dto.ResponseBody:
    properties:
      data: {}
      msg: {}
      result:
        type: boolean
    required:
    - result
    type: object
  dto.SubMenuRequest:
    properties:
      name:
        description: 서브 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      subMenuName:
        description: 서브 메뉴 타이틀
        type: string
    type: object
  dto.UpdateMenuRequest:
    properties:
      etcInfo:
        $ref: '#/definitions/dto.FoodEtcInfoRequest'
      event:
        description: 이벤트
        items:
          $ref: '#/definitions/menu_enums.MenuEventType'
        type: array
      id:
        description: 해당 메뉴 고유 id
        type: string
      menuCategory:
        description: 매뉴 카테고리
        items:
          $ref: '#/definitions/menu_enums.MenuCategoryType'
        type: array
      menuStatus:
        allOf:
        - $ref: '#/definitions/menu_enums.MenuSellStatusType'
        description: 주문 가능 여부
      name:
        description: 메뉴 이름
        type: string
      price:
        description: 가격
        type: integer
      subMenu:
        description: 서브메뉴
        items:
          $ref: '#/definitions/dto.SubMenuRequest'
        type: array
    required:
    - id
    type: object
  dto.UpdateOrderList4MenuRequest:
    properties:
      orderId:
        description: 고유 id
        type: string
      orderMenu:
        description: 주문 메뉴 리스트
        items:
          type: string
        type: array
    required:
    - orderId
    - orderMenu
    type: object
  dto.UpdateOrderList4StatusRequest:
    properties:
      orderId:
        description: 고유 id
        type: string
      orderStatus:
        allOf:
        - $ref: '#/definitions/order_list_enums.OrderStatus'
        description: 주문 상태
    required:
    - orderId
    - orderStatus
    type: object
  menu_enums.FoodSpicyType:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    type: integer
    x-enum-comments:
      FS_None: 맵기 없음
    x-enum-varnames:
    - FS_None
    - FS_Level1
    - FS_Level2
    - FS_Level3
    - FS_Level4
    - FS_Level5
  menu_enums.MenuCategoryType:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    type: integer
    x-enum-comments:
      MC_Bread: 빵
      MC_FastFood: 패스트푸드
      MC_KoreaStyle: 한식
      MC_Pasta: 파스타
      MC_Pizza: 피자
      MC_Sushi: 초밥
    x-enum-varnames:
    - MC_KoreaStyle
    - MC_Sushi
    - MC_FastFood
    - MC_Pizza
    - MC_Pasta
    - MC_Bread
  menu_enums.MenuEventType:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - FE_TodayMenu
    - FE_Sale4CustomThanks
  menu_enums.MenuSellStatusType:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    type: integer
    x-enum-comments:
      MSS_Delete: 삭제된 메뉴
      MSS_EventEnd: 한시적 이벤트
      MSS_OnSeal: 판매중
      MSS_Season: 시즌 상품
      MSS_SeasonEnd: 시즌 상품 종료
      MSS_SoldOut: 매진
    x-enum-varnames:
    - MSS_OnSeal
    - MSS_SoldOut
    - MSS_Season
    - MSS_SeasonEnd
    - MSS_EventEnd
    - MSS_Delete
  order_list_enums.OrderStatus:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-comments:
      Cooking: 조리중
      DeliveryComplete: 주문완료
      InDelivery: 배달중
      OrderAddChange: 추가 주문으로 변경
      OrderReceipt: 주문 접수
    x-enum-varnames:
    - OrderReceipt
    - Cooking
    - InDelivery
    - DeliveryComplete
    - OrderAddChange
  rating_enum.RatingScore:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-comments:
      Bad: 나쁨
      Excellent: 최고
      Good: 보통
      VeryGood: 좋음
      Worst: 최악
    x-enum-varnames:
    - Worst
    - Bad
    - Good
    - VeryGood
    - Excellent
info:
  contact: {}
paths:
  /api/v1/account/user/add:
    post:
      consumes:
      - application/json
      description: 사용자 서비스 가입 API
      parameters:
      - description: 일반 사용자 등록용 DTO. dto.CreateUserRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NomalReadUserResponse'
      summary: 사용자 회원 가입
      tags:
      - Account-User-API
  /api/v1/order_list/order:
    get:
      consumes:
      - application/json
      description: 주문 내역 전체를 조회하는 API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.NomalReadOrderListResponse'
            type: array
      summary: 주문 내역 조회
      tags:
      - OrderList-Order-API
  /api/v1/order_list/order/add:
    post:
      consumes:
      - application/json
      description: 주문을 접수하는 API
      parameters:
      - description: 주문 접수용 DTO. dto.CreateOrderListRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NomalReadOrderListResponse'
      summary: 주문 접수
      tags:
      - OrderList-Order-API
  /api/v1/order_list/order/menu/update:
    put:
      consumes:
      - application/json
      description: 소비자가 메뉴 추가 등 주문을 갱신하는 API
      parameters:
      - description: 주문 내용 갱신용 DTO. dto.UpdateOrderList4MenuRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderList4MenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NomalReadOrderListResponse'
      summary: 주문 내역 갱신 (소비자 입장)
      tags:
      - OrderList-Order-API
  /api/v1/order_list/order/status/update:
    put:
      consumes:
      - application/json
      description: 업주가 주문 상태 정보 등을 갱신하는 API
      parameters:
      - description: 주문 상태 갱신용 DTO. dto.UpdateOrderList4StatusRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderList4StatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateOrderList4StatusRequest'
      summary: 주문 내역 갱신 (업주 입장)
      tags:
      - OrderList-Order-API
  /api/v1/order_list/order/user/{user_id}:
    get:
      consumes:
      - application/json
      description: User id를 전달하면 해당 사용자의 주문 내역을 제공하는 API
      parameters:
      - description: 'User id => User entity ID(_id) 값 '
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.NomalReadOrderListResponse'
            type: array
      summary: 주문 내역 조회 (사용자)
      tags:
      - OrderList-Order-API
  /api/v1/rating/add:
    post:
      consumes:
      - application/json
      description: 소비자가 리뷰 및 평점을 등록하는 API
      parameters:
      - description: 리뷰 평점 등록용 DTO. dto.CreateRatingRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FullReadRatingResponse'
      summary: 평점 및 리뷰 등록
      tags:
      - Rating-API
  /api/v1/store/menu/add:
    post:
      consumes:
      - application/json
      description: 메뉴를 등록하는 함수
      parameters:
      - description: 메뉴 등록용 DTO. dto.CreateMenuRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HalfReadMenuResponse'
      summary: 메뉴 등록
      tags:
      - Menu-API
  /api/v1/store/menu/delete:
    put:
      consumes:
      - application/json
      description: 메뉴를 수정하는 함수
      parameters:
      - description: 메뉴 수정용 DTO. dto.UpdateMenuRequest 객체 참고
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateMenuRequest'
      summary: 메뉴 수정
      tags:
      - Menu-API
  /api/v1/store/menu/delete/{menu_id}:
    delete:
      consumes:
      - application/json
      description: Menu 아이템을 논리적으로 삭제하는 함수 (물리적 X)
      parameters:
      - description: 'Menu id <= 메뉴 고유 id값 '
        in: path
        name: menu_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseBody'
      summary: 메뉴 삭제
      tags:
      - Menu-API
  /api/v1/store/menu/get/:
    get:
      consumes:
      - application/json
      description: 메뉴 리스트 조회를 하는 API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.HalfReadMenuResponse'
            type: array
      summary: 메뉴 리스트 조회
      tags:
      - Menu-API
  /api/v1/store/menu/get/{menu_id}:
    get:
      consumes:
      - application/json
      description: Menu id를 전달하면 메뉴의 상세 정보 및 해당 메뉴의 평점 및 리뷰 정보를 제공하는 API
      parameters:
      - description: 'Menu id <= 메뉴 고유 id값 '
        in: path
        name: menu_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadMenuRatingResponse'
      summary: 메뉴 조회
      tags:
      - Menu-API
swagger: "2.0"
